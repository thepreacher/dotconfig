;;; init-javascript.el --- Support for the Javascript language -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:

;; JavaScript

;; For my JavaScript configuration, I took my sources from the Nicolas Petton’s blog which I found very well explained.
;; Setting up Emacs for JavaScript (part #1) Setting up Emacs for JavaScript (part #2)
;; I like to use prettier to get my TypeScript code clean. To use it, don’t forget to install it with your package manager.
(use-package prettier-js
  :defer
  :custom (prettier-js-args '("--print-width" "100"
                              "--single-quote" "true"
                              "--trailing-comma" "all")))

;; js2-mode

;; By default, GNU Emacs uses js-mode as major mode for JavaScript buffers and I
;; prefer use js2-mode instead because of his abilities to parses buffers and builds an AST for things like syntax highlighting.
(use-package js2-mode
  :hook ((js2-mode . js2-imenu-extras-mode)
         (js2-mode . prettier-js-mode))
  :mode "\\.js\\'"
  :init (setq js-indent-level 2))

;; js2-refactor

;; Provides powerful refactoring based on the AST generated by js2-mode.
(use-package js2-refactor
  :bind (:map js2-mode-map
          ("C-k" . js2r-kill)
          ("M-." . nil))
  :hook ((js2-mode . js2-refactor-mode)
         (js2-mode . (lambda ()
                       (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
  :init (setq js2r-add-keybindings-with-prefix "C-c C-r"))

;; xref-js2

;; Makes it easy to jump to function references or definitions.
(use-package xref-js2 :defer 5)

;; tern

;; Parses JavaScript files in a project and makes type inference to provide meaningful completion (with type clues) and cross-reference support.
;; Unfortunately, tern has some problems with cross-references that explain why I am using xref-js2 instead.

(use-package tern
  :ensure-system-package (tern . "pnpm add -g tern")
  :bind (("C-c C-c" . compile)
         :map tern-mode-keymap
         ("M-." . nil))
  :hook ((js2-mode . company-mode)
         (js2-mode . tern-mode)))


;; Then, add a .tern-project file to the root of your project.
;; Here is an example configuration for a project that uses requirejs and jQuery, without taking into account of the bower_components directory:
;;
;; {
;;     "libs": [
;;         "jquery"
;;     ],
;;     "loadEagerly": [
;;         "./**/*.js"
;;     ],
;;     "dontLoad": [
;;         "./bower_components/"
;;     ],
;;     "plugins": {
;;         "requirejs": {
;;             "baseURL": "./"
;;         }
;;     }
;; }
;;


;; JSON

;; JSON is used a lot, especially in the web. Therefore, it is important to have a decent configuration to feel comfortable when handling such files.
(use-package json-mode
  :delight "J "
  :mode "\\.json\\'"
  :hook (before-save . my/json-mode-before-save-hook)
  :preface
  (defun my/json-mode-before-save-hook ()
    (when (eq major-mode 'json-mode)
      (json-pretty-print-buffer)))

  (defun my/json-array-of-numbers-on-one-line (encode array)
    "Prints the arrays of numbers in one line."
    (let* ((json-encoding-pretty-print
            (and json-encoding-pretty-print
                 (not (loop for x across array always (numberp x)))))
           (json-encoding-separator (if json-encoding-pretty-print "," ", ")))
      (funcall encode array)))
  :config (advice-add 'json-encode-array :around #'my/json-array-of-numbers-on-one-line))



;; Typescript
(use-package typescript-mode
  :mode ("\\.ts\\'" "\\.tsx\\'")
  :hook (typescript-mode . prettier-js-mode)
  :custom
  (add-hook 'typescript-mode-hook #'(lambda ()
                                      (enable-minor-mode
                                       '("\\.tsx?\\'" . prettier-js-mode)))))

;; Vue.js
(use-package vue-mode
  :delight "V "
  :mode "\\.vue\\'"
  :init
  (setq mmm-submode-decoration-level 0
        vue-html-extra-indent 2))







(provide 'init-javascript)
;;; init-javascript.el ends here
